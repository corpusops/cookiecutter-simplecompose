on:
  workflow_dispatch:
    inputs:
      RUNTESTS: {description: 'Run tests', required: false}
  push:
  pull_request:
  schedule: [{cron: '1 0 1,15 * *'}]
env:
  DOCKER_BUILDKIT: "1"
  COMPOSE_DOCKER_CLI_BUILD: "1"
  BUILDKIT_PROGRESS: "plain"
  NO_SQUASH: ""
  NONINTERACTIVE: "1"
  FORCE_ONLINE: "1"
  COMPOSE_FILE: "docker-compose.yml:docker-compose-build.yml"
  MAIN_BRANCH: {{cookiecutter.main_branch}}
  RELEASABLE_REPOS: "^{{cookiecutter.git_ns}}/"
  RUNTESTS: {{'${{'}} github.event.inputs.RUNTESTS || '1' }}
{%- if "pypi" in cookiecutter.release_mode  %}
  RELEASABLE_BRANCHES: "^refs/tags"
  TWINE_USERNAME: {{'${{'}} secrets.PYPI_USERNAME || '__token__' }}
  TWINE_PASSWORD: {{'${{'}} secrets.PYPI_PASSWORD || '' }}
{%- else %}
  RELEASABLE_BRANCHES: "^refs/tags|^(refs/heads/)?({{cookiecutter.main_branch}})$"
{%- endif %}
{%- if "docker" in cookiecutter.release_mode  %}
  IMG: "{{cookiecutter.docker_image}}"
{%- endif %}
jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with: {submodules: recursive}
    - name: Set vars
      run: |-
          if ( echo "$GITHUB_REF" | egrep -q "${RELEASABLE_BRANCHES}" ) \
          && ( echo "$GITHUB_REPOSITORY" | egrep -q "${RELEASABLE_REPOS}" )
          then releasable=true;else releasable=false;fi
          echo "::set-output name=releasable::$releasable"
      id: v
    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: {{'${{'}} secrets.DOCKER_HUB_USERNAME }}
        password: {{'${{'}} secrets.DOCKER_HUB_ACCESS_TOKEN }}
    - name: Activate docker experimental
      run: |-
        sudo bash -exc "service docker stop;python -c \
        \"d='/etc/docker/daemon.json';\
        import json;c=json.load(open(d));c['experimental']=True;\
        open(d, 'w').write(json.dumps(c))\"
        systemctl restart docker"
    - name: Setup env
      run:  |-
        set -e
        for i in .env;do if [ -e $i.test ];then cp -v $i.test $i;fi;done
        printf "USER_UID=$(id -u)\nUSER_GID=$(id -g)\n">>.env
    - name: Build dependant docker images if any
      run: |-
        set -e
        if ( docker-compose config|egrep -q build:; );then
          docker-compose build
        fi
    - name: Start stack
      if: {{'${{'}} env.RUNTESTS == '1' }}
      run: docker-compose up -d && docker-compose ps -a
{%- if "docker" in cookiecutter.release_mode  %}
    - name: Release docker image
      run:  |-
        set -ex
        br_or_tag=${GITHUB_REF##*/}
        vv() { echo "$@">&2;"$@"; }
        if [ "x${{'{{'}}steps.v.outputs.releasable}}" = "xtrue" ];then
          if ( echo "$GITHUB_REF" | egrep -q "$RELEASABLE_BRANCHES" );then
            docker tag ${IMG}:latest ${IMG}:$br_or_tag
            vv docker push ${IMG}:$br_or_tag
          fi
          if [ "x$br_or_tag" = "x$MAIN_BRANCH" ];then
            vv docker push ${IMG}:latest
          fi
        fi
{%- endif %}
{%- if "pypi" in cookiecutter.release_mode  %}
    - name: Test with tox
      if: {{'${{'}} env.RUNTESTS == '1' }}
      run: |-
        set -ex
        http_services="bitwarden"
        services="db setup $http_services"
        bash="docker-compose exec -T -u app app bash"
        http_wait() { $bash -exc "/cops_helpers/dockerize -wait http://$1 -timeout 60s"; }
        # docker-compose exec -T db bash -c \
        #   'printf "drop schema public cascade;create schema public;"|psql -U $POSTGRES_USER $POSTGRES_DB'
        # docker-compose up -d --force-recreate --no-deps $services
        for i in $http_services;do http_wait $i;done
        $bash -exc '\
        ( while !(touch .tox/ready);do echo "app not ready">&2;sleep 0.5;done \
        && touch appready; )&\
        /cops_helpers/dockerize -wait file://$(pwd)/appready -timeout 60s;'
        $bash -exc 'tox -e linting,coverage'
    - name: Setup python
      if: {{'${{'}} steps.v.outputs.releasable == 'true' && env.TWINE_PASSWORD != '' }}
      uses: actions/setup-python@v2
    - name: Install python release tools & make pkgs
      if: {{'${{'}} steps.v.outputs.releasable == 'true' && env.TWINE_PASSWORD != '' }}
      run: python -m pip install -U --user wheel build twine
           && python -m build --sdist --wheel
           && twine upload dist/*
{%- endif %}
